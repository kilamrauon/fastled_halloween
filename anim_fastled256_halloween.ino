/* Arduino 256 RGB LEDs Matrix Animation Frame 
 * Using WS2812 LED Strips
 
Created by Yvan / https://Brainy-Bits.com
Modified by kilam rauon halloween 2022 : pumpkin animation - citrouille 
This code is in the public domain...

You can: copy it, use it, modify it, share it or just plain ignore it!
Thx!

*/


//#include <avr/pgmspace.h>
#include <pgmspace.h>  // Needed to store stuff in Flash using PROGMEM
#include "FastLED.h"       // Fastled library to control the LEDs

// How many leds are connected?
#define NUM_LEDS 256

// Define the Data Pin
#define DATA_PIN 12  // Connected to the data pin of the first LED strip

// Define the array of leds
CRGB leds[NUM_LEDS];

// Create the array of retro arcade characters and store it in Flash memory
const long c1[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0xFF8800, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};



const long c2[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFFFFFF, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFFFFFF, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFFFFFF, 0xFFFFFF, 0xFF8800, 0xFFFFFF, 0xFFFFFF, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long c3[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFFFFFF, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFFFFFF, 0xFFFFFF, 0xFF8800, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};


const long c4[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFFFFFF, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0xFF8800, 0xFFFFFF, 0xFFFFFF, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long c5[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0xFF8800, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0x000000, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long c6[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF40, 0x00FF40, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x00FF40, 0x00FF40, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0xFF8800, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000,
0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0xFF8800, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0xFF8800, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

void setup() { 
FastLED.addLeds<NEOPIXEL,DATA_PIN>(leds, NUM_LEDS);  // Init of the Fastled library
FastLED.setBrightness(15);
}

void loop() { 




// Put DigDug first frame
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c1[i]));
  }
}
FastLED.show();
delay(3000);
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c2[i]));
  }
  FastLED.show();
}

delay(500);
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c1[i]));
  }

FastLED.show();
delay(500);
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c2[i]));
  }
}
  FastLED.show();


delay(500);
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c1[i]));
  }

FastLED.show();
delay(500);
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c2[i]));
  }
  FastLED.show();

}

delay(500);

for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c3[i]));
  }
  FastLED.show();

}
delay(500);

for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c4[i]));
  }
  FastLED.show();

}
delay(500);
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c1[i]));
  }
  FastLED.show();

}
delay(500);

for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c3[i]));
  }
  FastLED.show();

}
delay(500);
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c4[i]));
  }
  FastLED.show();

}
delay(500);
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c2[i]));
  }
  FastLED.show();

}
delay(1000);
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c5[i]));
  }
  FastLED.show();

}
delay(1000);
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c6[i]));
  }
  FastLED.show();

}
delay(2000);

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c5[i]));
  }
  FastLED.show();



delay(2000);
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c1[i]));
  }
  FastLED.show();


delay(500);

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c2[i]));
  }
  FastLED.show();
  delay (250);
  FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c1[i]));
  }
  FastLED.show();


delay(500);

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(c2[i]));
  }
  FastLED.show();


delay(500);


delay(500);
}
